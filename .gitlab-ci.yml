include:
  - project: "ExplorViz/code/deployment"
    file: ".gitlab-ci-explorviz-common.yml"

default:
  tags:
    - exec-docker
  image: ghcr.io/graalvm/graalvm-community:21
  cache: # Cache modules in between jobs
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS"
      when: never
    - if: "$CI_COMMIT_BRANCH"

stages:
  - build
  - code-analysis
  - test
  - coverage
  - visualize
  - deploy:images
  - deploy:retagging

build:
  stage: build
  script: ./gradlew --build-cache assemble
  cache:
    policy: push
    paths:
      - .gradle
  artifacts:
    paths:
      - build

pmd:
  stage: code-analysis
  script: ./gradlew pmdMain

checkstyle:
  stage: code-analysis
  script: ./gradlew checkstyleMain

test:
  stage: test
  script:
    - ./gradlew jacocoTestReport
    # Print test coverage to console (for coverage badge)
    - cat build/reports/jacoco/test/html/index.html | grep -o 'Total[^%]*%' | sed 's/<.*>/ /; s/Total/Jacoco Coverage Total:/'
  coverage: "/Jacoco Coverage Total: ([0-9]{1,3})%/"
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
    paths:
      - build/reports/jacoco/test/jacocoTestReport.xml

integration-test:
  stage: test
  tags:
    - podman
  allow_failure: true
  script:
    - DOCKER_HOST="unix:///run/user/$UID/podman/podman.sock" TESTCONTAINERS_RYUK_DISABLED=true TESTCONTAINERS_CHECKS_DISABLE=true ./gradlew integrationTest jacocoTestReport
    # Print test coverage to console (for coverage badge)
    - cat build/reports/jacoco/test/html/index.html | grep -o 'Total[^%]*%' | sed 's/<.*>/ /; s/Total/Jacoco Coverage Total:/'
  coverage: "/Jacoco Coverage Total: ([0-9]{1,3})%/"
  dependencies:
    - test
  artifacts:
    when: always
    reports:
      junit: build/test-results/**/TEST-*.xml
    paths:
      - build/reports/jacoco/test/jacocoTestReport.xml

coverage:
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura
    - "python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/cobertura.xml"
    # read the <source></source> tag and prepend the path to every filename attribute
    - "python /opt/source2filename.py build/cobertura.xml"
  needs: ["test"]
  dependencies:
    - test
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/cobertura.xml

push-dockerhub-native-main-amd64:
  extends: .build-and-deploy-quarkus-native
  variables:
    IMAGE_TAG: "amd64"

push-dockerhub-native-main-arm64:
  extends: .build-and-deploy-quarkus-native
  rules:
    - if: $MULTI_ARCH_BUILD || $ARM64_BUILD
  variables:
    IMAGE_TAG: "arm64"
  tags:
    - arm64

push-dockerhub-native-mr:
  extends: .build-and-deploy-quarkus-native
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    IMAGE_TAG: mr-${CI_MERGE_REQUEST_IID}-native

push-dockerhub-main-amd64:
  extends: .build-and-deploy-quarkus-jvm
  variables:
    IMAGE_TAG: "amd64"

push-dockerhub-main-arm64:
  extends: .build-and-deploy-quarkus-jvm
  rules:
    - if: $MULTI_ARCH_BUILD || $ARM64_BUILD
  variables:
    IMAGE_TAG: "arm64"
  tags:
    - arm64

push-dockerhub-mr:
  extends: .build-and-deploy-quarkus-jvm
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    IMAGE_TAG: mr-${CI_MERGE_REQUEST_IID}-jvm

retag-amd64-as-latest-jvm:
  extends: .retag-dockerhub-image
  rules:
    - if: $MULTI_ARCH_BUILD || $ARM64_BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    SOURCE_TAG: "amd64"
    TARGET_TAG: "latest"

retag-amd64-as-latest-native:
  extends: .retag-dockerhub-image
  rules:
    - if: $MULTI_ARCH_BUILD || $ARM64_BUILD
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    IMAGE_NAME: $DOCKERHUB_IMAGE_NAME_NATIVE
    SOURCE_TAG: "amd64"
    TARGET_TAG: "latest"

publish-multi-arch-manifest-jvm:
  extends: .retag-as-multi-arch-dockerhub-image

publish-multi-arch-manifest-native:
  extends: .retag-as-multi-arch-dockerhub-image
  variables:
    IMAGE_NAME: $DOCKERHUB_IMAGE_NAME_NATIVE
